from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.providers.postgres.operators.postgres import PostgresOperator

class Principal:
        def __init__(self):
                from selenium.webdriver.chrome.options import Options as ChromeOptions
                from selenium.webdriver.chrome.service import Service as ChromeService
                from webdriver_manager.chrome import ChromeDriverManager
                from selenium import webdriver
                from webdriver_manager.core.utils import ChromeType

                options = ChromeOptions()
                prefs = {
                    'profile.managed_default_content_settinfs.images': 2,
                    'intl.accept_languages': 'en, en_US'
                }
                options.add_experimental_option('prefs', prefs)
                options.add_argument('--no-sandbox')
                options.add_argument('--disable-dev-shm-usage')
                options.add_argument('--headless')

                self._driver = webdriver.Chrome(
                    service = ChromeService(
                        ChromeDriverManager(
                            chrome_type = ChromeType.CHROMIUM
                        ).install()
                    ),
                    options = options
                )
                self._driver.implicitly_wait(5)

        def cotacao_vale(self):
            from selenium.webdriver.support.wait import WebDriverWait
            from selenium.webdriver.support import expected_conditions as EC
            from selenium.webdriver.common.by import  By
            from airflow.models import Variable

            self._driver.get("https://economia.uol.com.br/cotacoes/bolsas/acoes/bvsp-bovespa/vale3-sa/")

            try:
                cotacao = WebDriverWait(self._driver, 5).until(
                    EC.presence_of_ement_located((By.CSS_SELECTOR, 'span[class="chart-info-val ng-binding"]'))).text.strip()
            except:
                cotacao = '0,0'
                print("Elemento nÃ£o encontrado!")

            Variable.set("cotacao", cotacao)
            Variable.get(cotacao)

            def salvar_cotacao(self):
                from airflow.models import Variable
                from airflow.providers.postgres.hooks.postgres import PostgresHook

                cotacao = Variable.get("cotacao")
                hook = PostgresHook("conexao_db")
                connection = hook.get_conn()
                cursor = connection.cursor()
                sql = f"INSERT INTO TB_COTACAO_VALE (dt, cotacao) values (CURRENT_TIMESTAMP, '{cotacao}')"
                cursor.execute(sql)
                connection.commit()

                from datetime import datetime, timedelta

                dag_args = {
                    'owner': '',
                    'retries': 1,
                    'retry_delay': timedelta(minutes = 5)
                }
                start_date = datetime(2023, 4 , 17)

                with DAG(
                    dag_id = 'dag_exemplo',
                    description = '', 
                    default_args = dag_args,
                    start_date = start_date,
                    schedule_interval = timedelta(minutes=1),
                    catchup = False
                ) as dag:
                    cria_tabela = PostgresOperator(
                        task_id = 'criar-tabela',
                        postgres_conn_id='conexao_db',
                        sql = """
                            CREATE TABLE IF NOT EXISTS TB_COTACAO_VALE(
                                ID INT GENERATED BY DEFAULT AS IDENTITY,
                                DT TIMESTAMP,
                                COTACAO VARCAHR NOT NULL
                            )
                            """
                    )

                    get_cotacao = PythonOperator(
                        task_id = 'get_cotacao',
                        python_callable= Principal().cotacao_vale,
                    )

                    insere_dados = PythonOperator(
                        task_id = 'insere_dados',
                        python_callable= Principal().salvar_cotacao,
                    )

                    cria_tabela >> get_cotacao >> insere_dados


